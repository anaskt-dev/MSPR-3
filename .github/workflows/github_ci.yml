name: CI/CD MSPR

on:
  push:
    branches:
      - main
      - MSPR3-FIN
  pull_request:
    branches:
      - main
      - MSPR3-FIN

jobs:

  # ----------------------------------------
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install -r backend/requirements.txt

      - name: Build Docker images
        run: |
          docker build -t local-backend ./backend
          docker build -t local-frontend ./frontend

  # ----------------------------------------
  lint:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Clean caches before lint
        run: |
          find . -type d -name "__pycache__" -exec rm -rf {} +
          find . -type f -name "*.pyc" -delete

      - name: Install Flake8 and dependencies
        run: |
          pip install flake8==7.0.0
          pip install -r backend/requirements.txt

      - name: Run Flake8 linter
        run: |
          flake8 .

  # ----------------------------------------
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install -r backend/requirements.txt
          pip install pytest

      - name: Run backend tests
        run: |
          export PYTHONPATH=$PYTHONPATH:./backend
          pytest backend/tests --maxfail=1 --disable-warnings --tb=short

  # ----------------------------------------
  security_scan:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety jq

      - name: Run security scan with Safety
        run: |
          safety check --json > safety_report.json || true

      - name: Upload security report artifact
        uses: actions/upload-artifact@v4
        with:
          name: safety-report
          path: safety_report.json

      - name: Notify Discord Security Scan
        env:
          DISCORD_SECURITY_WEBHOOK: ${{ secrets.DISCORD_SECURITY_WEBHOOK }}
        run: |
          if [ ! -s safety_report.json ]; then
            echo "Safety report is empty, skipping detailed report."
            REPORT="‚úÖ Aucun probl√®me de s√©curit√© d√©tect√©."
          else
            if jq -e type safety_report.json > /dev/null 2>&1; then
              REPORT=$(jq -r '.[] | "\(.package_name) \(.affected_versions) \(.vulnerability_id) \(.advisory)"' safety_report.json)
              if [ -z "$REPORT" ]; then
                REPORT="‚úÖ Aucun probl√®me de s√©curit√© d√©tect√©."
              fi
            else
              echo "Safety report contains invalid JSON, skipping parsing."
              REPORT="‚ö†Ô∏è Rapport de s√©curit√© invalide g√©n√©r√©."
            fi
          fi

          echo "Sending report to Discord..."
          message="üîê Scan s√©curit√© termin√© sur branch \`${{ github.ref_name }}\` :%0A$REPORT"
          payload="{\"content\": \"$message\"}"

          curl -H "Content-Type: application/json" -X POST -d "$payload" "$DISCORD_SECURITY_WEBHOOK"

  # ----------------------------------------
  accessibility_scan:
    runs-on: ubuntu-latest
    needs: security_scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies (Python + Pa11y + wait-on)
        run: |
          pip install streamlit
          pip install -r backend/requirements.txt
          npm install -g pa11y wait-on

      - name: Start Streamlit frontend in background
        run: |
          nohup streamlit run frontend/app.py --server.port 8501 --server.headless true &
          sleep 10

      - name: Wait for Streamlit to be ready
        run: |
          npx wait-on http://localhost:8501

      - name: Run Pa11y accessibility scan
        run: |
            echo "Running Pa11y scan..."
            npx pa11y http://localhost:8501 --reporter html > pa11y-report.html || true
        
      - name: Upload Pa11y accessibility report
        uses: actions/upload-artifact@v4
        with:
            name: pa11y-accessibility-report
            path: pa11y-report.html
        

      - name: Notify Discord Accessibility Scan
        env:
          DISCORD_PA11Y_WEBHOOK: ${{ secrets.DISCORD_PA11Y_WEBHOOK }}
        run: |
          message="‚ôøÔ∏è Pa11y scan termin√© sur ${{ github.ref_name }}. Rapport disponible dans les artefacts GitHub Actions."
          payload=$(echo "{\"content\": \"$message\"}")
          curl -H "Content-Type: application/json" -X POST -d "$payload" "$DISCORD_PA11Y_WEBHOOK"

  # ----------------------------------------
  docker_push:
    runs-on: ubuntu-latest
    needs: security_scan
    if: github.ref_name == 'main' || github.ref_name == 'MSPR3-FIN'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker images
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/myimage-backend:latest ./backend
          docker build -t ${{ secrets.DOCKER_USERNAME }}/myimage-frontend:latest ./frontend
          docker push ${{ secrets.DOCKER_USERNAME }}/myimage-backend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/myimage-frontend:latest

  # ----------------------------------------
  notify_discord:
    runs-on: ubuntu-latest
    needs:
      - test
      - lint
      - security_scan
      - accessibility_scan
      - docker_push
    if: always()
    steps:
      - name: Notify Discord
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            message="‚úÖ CI/CD compl√©t√©e avec succ√®s sur ${{ github.ref_name }}."
          else
            message="‚ùå CI/CD √©chou√©e sur ${{ github.ref_name }}. V√©rifiez les logs."
          fi
          payload=$(echo "{\"content\": \"$message\"}")
          curl -H "Content-Type: application/json" -X POST -d "$payload" "$DISCORD_WEBHOOK"
